1. [二分查找法](#binarySearch) 
2. [约瑟夫环](#joseph)

<h2 id="binarySearch">I. 二分查找法</h2>

也称折半搜索，二分搜索。

二分查找是在一个有序的集合中查找某一特定元素。

搜索过程从数组的中间元素开始，如果中间元素正好是要查找的元素，则搜索过程结束；如果某一特定元素大于或小于中间元素，则在数组大于或小于中间元素的那一半中查找，再从那一半的中间元素开始比较。如果在某一步骤数组为空，则代表找不到。这种搜索算法每一次比较都使搜索范围缩小一半。

```php
<?php
    $arr = [1, 2, 2, 3, 4, 5, 5, 7, 8];

    /**
     * $arr - 需要查找的数组,使用地址符表示在原数组上查找
     * $low_index - 查找数组的起始位置
     * $high_index - 查找数组的结束位置
     * $key - 要查找的元素
     * 返回值是找到元素的索引，-1表示没有查找到
     */
    function binarySearch(&$arr, $low_index, $high_index, $key) {
        $mid_index = ceil(($low_index + $high_index) / 2); // 找中间索引
        if ( $key == $arr[$mid_index] ) {
            // 如果中间索引的元素就是要找的元素，直接返回中间索引
            return $mid_index;
        } else if ( $key < $arr[$mid_index] ) {
            // 如果要查找的元素小于中间元素，那么下次查找的范围的最大边界就是这个中间索引
            $high_index = $mid_index;
        } else {
            // 反之，要查找的元素大于中间元素，那么下次查找范围的最小边界为这个中间索引
            $low_index = $mid_index;
        }
        if ( $high_index == $low_index + 1  ) {
            // 如果查找范围是两个相邻的数，那就说明找不到这个元素
            return -1;
        }
        return binarySearch($arr, $low_index, $high_index, $key);
    }
?>
```

去除注释：

```php
<?php
    function binarySearch(&$arr, $low_index, $high_index, $key) {
        $mid_index = ceil(($low_index + $high_index) / 2);
        if ( $key == $arr[$mid_index] ) {
            return $mid_index;
        } else if ( $key < $arr[$mid_index] ) {
            $high_index = $mid_index;
        } else {
            $low_index = $mid_index;
        }
        if ( $high_index == $low_index + 1 ) {
            return -1;
        }
        return binarySearch($arr, $low_index, $high_index, $key);
    }
?>
```

上面的递归还可以非常容易的写成循环：

```php
<?php
    function binarySearch(&$arr, $low_index, $high_index, $key) {
        while ( $high_index != $low_index + 1 ) {
            $mid_index = ceil(($low_index + $high_index) / 2);
            if ( $key == $arr[$mid_index] ) {
                return $mid_index;
            } else if ( $key < $arr[$mid_index] ) {
                $high_index = $mid_index;
            } else {
                $low_index = $mid_index;
            }
        }
        return -1;
    }
?>
```

<h2 id="joseph">II. 约瑟夫环</h2>

操场上有n个学生排成一圈，他们给自己从1到n编号来玩报数游戏。从编号为k的同学开始，依次从1到m报数，报到m的学生出列，下一位同学从1开始再次报数，直到再有同学报到m，再次出列...如此不停的进行下去，直到还剩一位同学。要求编程模拟此过程，输入n，m，k，输出最后那个同学的编号。

```php
<?php
    // 返回最后一个同学的编号
    // $n为排成一圈的同学数量
    // $m为离开队伍的报数
    // $k为开始报数的同学编号
    function joseph($n, $m, $k) {
        // 创建这些同学的数组，从开始报数的同学编号开始
        // 假如有5个同学，编号为1-5，从编号为3的开始报数
        // 那么创建的数组应该是这样的：[3, 4, 5, 1, 2]
        $arr = $k == 1 ? range(1, $n) : array_merge(range($k, $n), range(1, $k - 1));
        $saynumber = 0; // 用于记录当前同学的报数，初始化为0，还没开始报数

        while ( 1 ) {
            foreach($arr as $key => $val) {
                // 当前同学报数是否为$m
                if (++$saynumber == $m) {
                    // 将报到$m的同学的编号从数组移除
                    unset($arr[$key]);
                    // 重新将报数设为未报数状态
                    $saynumber = 0;
                    // 判断当前当前同学个数，为1就返回这个同学的编号
                    if (count($arr) == 1) {
                        return array_values($arr)[0];
                    }
                }
            }
        }
    }
?>
```

无注释简洁版：

```php
<?php
    function joseph($n, $m, $k) {
        $arr = $k == 1 ? range(1, $n) : array_merge(range($k, $n), range(1, $k - 1));
        $saynumber = 0;
        while ( 1 ) {
            foreach ($arr as $key => $val) {
                if (++$saynumber == $m) {
                    unset($arr[$key]);
                    $saynumber = 0;
                    if (count($arr) == 1) {
                        return array_values($arr)[0];
                    }
                }
            }
        }
    }
?>
```

递归版：

```php
<?php
    function joseph($n, $m, $k, $saynumber = 0, &$arr = null) {
        $arr = !is_null($arr) ? $arr : ($k == 1 ? range(1, $n) : array_merge(range($k, $n), range(1, $k - 1)));
        foreach($arr as $key => $val) {
            if (++$saynumber == $m) {
                unset($arr[$key]);
                if (count($arr) == 1) {
                    return array_values($arr)[0];
                }
                $saynumber = 0;
            }
        }
        return joseph($n, $m, $k, $saynumber, $arr);
    }
?>
```

























